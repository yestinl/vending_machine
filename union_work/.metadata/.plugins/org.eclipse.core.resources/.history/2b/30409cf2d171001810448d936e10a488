#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/pwm.h"
#include "inc/hw_ints.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom_map.h"
#include "inc/hw_i2c.h"
#include "driverlib/i2c.h"
#include "utils/uartstdio.h"
#include "utils/softi2c.h"
#include "driverlib/systick.h"
#include "driverlib/rom.h"
#include "inc/hw_nvic.h"
#include "driverlib/fpu.h"
#include "TCS34725_file.h"
#include "softi2c.h"
#include "vl6180x_i2c.h"

#define confirm_distance 0x64
#define blue_r 0x19
#define blue_g 0x2E
#define blue_b 0x27
#define red_r 0x4B
#define red_g 0x0E
#define red_b 0x0D
#define green_r 0x35
#define green_g 0x30
#define green_b 0x16
#define purple_r 0x21
#define purple_g 0x19
#define purple_b 0x1D
#define yellow_r 0x70
#define yellow_g 0x53
#define yellow_b 0x1B
#define pink_r 0x5A
#define pink_g 0x26
#define pink_b 0x24
void UARTSend(const uint8_t *pui8Buffer, uint32_t ui32Count);
uint8_t distance=0;

uint32_t blue_distance=0;
uint32_t red_distance=0;
uint32_t green_distance=0;
uint32_t purple_distance=0;
uint32_t yellow_distance=0;
uint32_t pink_distance=0;

uint16_t color_min_distance;
uint8_t result_color=0x01;

uint8_t data_staus=0, data_id;

uint16_t light;


uint32_t g_ui32SysClock;

void
UARTSend(const uint8_t *pui8Buffer, uint32_t ui32Count)
{
    //
    // Loop while there are more characters to send.
    //
    while(ui32Count--)
    {
        //
        // Write the next character to the UART.
        //
        UARTCharPutNonBlocking(UART0_BASE, *pui8Buffer++);
    }
}
void distance_show(void)
{        //sda pb3 scl pb2

    int distance_7;
    int distance_6;
    int distance_5;
    int distance_4;
    int distance_0;
    int distance_3;
    int distance_2;
    int distance_1;

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);                 //设置系统时钟源
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    IIC_Init();

    VL6180X_Init();
    GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE,GPIO_PIN_0|GPIO_PIN_1);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,GPIO_PIN_0|GPIO_PIN_4);

        data_id = VL6180X_CheckID();  // 0x03

        distance = RangePollingRead();
        distance_7 = (distance >> 7) & 0x01;
        distance_6 = (distance >> 6) & 0x01;
        distance_5 = (distance >> 5) & 0x01;
        distance_4 = (distance >> 4) & 0x01;
        distance_3 = (distance >> 3) & 0x01;
        distance_2 = (distance >> 2) & 0x01;
        distance_1 = (distance >> 1) & 0x01;
        distance_0 = distance & 0x01;
        GPIOPinWrite(GPIO_PORTN_BASE,GPIO_PIN_1,distance_7);
        GPIOPinWrite(GPIO_PORTN_BASE,GPIO_PIN_0,distance_6);
        GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4,distance_5);
        GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_0,distance_4);
       // UARTCharPutNonBlocking(UART0_BASE, distance_7);
       // UARTCharPutNonBlocking(UART0_BASE, distance_6);
       // UARTCharPutNonBlocking(UART0_BASE, distance_5);
       // UARTCharPutNonBlocking(UART0_BASE, distance_4);
       // UARTCharPutNonBlocking(UART0_BASE, distance_3);
       // UARTCharPutNonBlocking(UART0_BASE, distance_2);
       // UARTCharPutNonBlocking(UART0_BASE, distance_1);
       // UARTCharPutNonBlocking(UART0_BASE, distance_0);
          UARTCharPutNonBlocking(UART0_BASE, distance);
        DelayMS(200);





}
int main(void)
{       //sda pn4  scl pn5
    //
    // Set the clocking to run directly from the crystal at 120MHz.
    //
        uint8_t readdata1[2];
        uint8_t readdata2[2];
        uint8_t readdata3[2];     //读数据
        uint32_t readdata[3];
        uint8_t color_number[6] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
    g_ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
                                             SYSCTL_OSC_MAIN |
                                             SYSCTL_USE_PLL |
                                             SYSCTL_CFG_VCO_480), 120000000);

        SysTickPeriodSet(SysCtlClockGet());
        SysTickEnable();
    //
    // Enable the GPIO port that is used for the on-board LED.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
        SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C2);
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

        GPIOPinConfigure(GPIO_PN5_I2C2SCL);
        GPIOPinConfigure(GPIO_PN4_I2C2SDA);

    //
    // Enable the GPIO pins for the LED (PN0).
    //

        GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE,D1);
        GPIOPinTypeI2C(GPIO_PORTN_BASE,GPIO_PIN_4);
        GPIOPinTypeI2CSCL(GPIO_PORTN_BASE,GPIO_PIN_5);

    //
    // Enable the peripherals used by this example.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    //
    // Enable processor interrupts.
    //
    IntMasterEnable();

    //
    // Set GPIO A0 and A1 as UART pins.
    //
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    //
    // Configure the UART for 115,200, 8-N-1 operation.
    //
    UARTConfigSetExpClk(UART0_BASE, g_ui32SysClock, 115200,
                            (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                             UART_CONFIG_PAR_NONE));

    //
    // Enable the UART interrupt.
    //
    IntEnable(INT_UART0);
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);


        I2CMasterInitExpClk(I2C2_BASE,SysCtlClockGet(),false);

        //TCS34725_Disable();

        TCS34725_Enable();

        TCS34725_SetIntegrationTime(TCS34725_INTEGRATIONTIME_700MS);
        TCS34725_SetGain(TCS34725_GAIN_4X);
        Delay_ms(1000);
        while(1)
        {

            I2CMasterReadTCS34725(readdata1,SLAVE_ADDRESS,RED_ADDR,2);//RED_ADDR BLUE_ADDR GREEN_ADDR
            Delay_ms(1000);
            I2CMasterReadTCS34725(readdata2,SLAVE_ADDRESS,GREEN_ADDR,2);//RED_ADDR BLUE_ADDR GREEN_ADDR
            Delay_ms(1000);
            I2CMasterReadTCS34725(readdata3,SLAVE_ADDRESS,BLUE_ADDR,2);//RED_ADDR BLUE_ADDR GREEN_ADDR
            Delay_ms(1000);
            readdata[0] = readdata1[1];
            readdata[1] = readdata2[1];
            readdata[2] = readdata3[1];

//        blue_distance=fabs(readdata[0]-blue_r)/2+fabs(readdata[1]-blue_g)/2+fabs(readdata[2]-blue_b)/2;
//        red_distance=fabs(readdata[0]-red_r)/2+fabs(readdata[1]-red_g)/2+fabs(readdata[2]-red_b)/2;
//        green_distance=fabs(readdata[0]-green_r)/2+fabs(readdata[1]-green_g)/2+fabs(readdata[2]-green_b)/2;
//        purple_distance=2.3*fabs(readdata[0]-purple_r)+fabs(readdata[1]-purple_g)+fabs(readdata[2]-purple_b);
//        yellow_distance=fabs(readdata[0]-yellow_r)/2+fabs(readdata[1]-yellow_g)/2+fabs(readdata[2]-yellow_b)/2;
//        pink_distance=(fabs(readdata[0]-pink_r)/2+1.5*fabs(readdata[1]-pink_g)/2+1.5*fabs(readdata[2]-pink_b)/2);
          blue_distance=(fabs(readdata[0]-blue_r)+fabs(readdata[1]-blue_g)+fabs(readdata[2]-blue_b))/3;
          red_distance=(fabs(readdata[0]-red_r)+fabs(readdata[1]-red_g)+fabs(readdata[2]-red_b))/3;
          green_distance=(2*fabs(readdata[0]-green_r)+fabs(readdata[1]-green_g)+fabs(readdata[2]-green_b))/4;
          purple_distance=(fabs(readdata[0]-purple_r)+fabs(readdata[1]-purple_g)+fabs(readdata[2]-purple_b))/3;
          yellow_distance=(2*fabs(readdata[0]-yellow_r)+fabs(readdata[1]-yellow_g)+fabs(readdata[2]-yellow_b))/4;
          pink_distance=(fabs(readdata[0]-pink_r)+fabs(readdata[1]-pink_g)+fabs(readdata[2]-pink_b))/3;

        color_min_distance=blue_distance;
        result_color=0x01;
        if(red_distance<color_min_distance)
        {
            color_min_distance=red_distance;
            result_color=0x02;
        }
        if(green_distance<color_min_distance)
        {
            color_min_distance=green_distance;
            result_color=0x03;
        }
        if(purple_distance<color_min_distance)
        {
            color_min_distance=purple_distance;
            result_color=0x04;
        }
        if(yellow_distance<color_min_distance)
        {
            color_min_distance=yellow_distance;
            result_color=0x05;
        }
        if(pink_distance<color_min_distance)
        {
            color_min_distance=pink_distance;
            result_color=0x06;
        }



        if(color_min_distance<=0xFF)
        {
            switch(result_color)
            {
                case 0x01:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[0]);
//                    UARTSend((uint8_t *)"blue", 4);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
//                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
                case 0x02:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[1]);
//                    UARTSend((uint8_t *)"red", 3);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
//                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
                case 0x03:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[2]);
//                    UARTSend((uint8_t *)"green", 5);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
                case 0x04:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[3]);
//                    UARTSend((uint8_t *)"purple", 6);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
//                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
                case 0x05:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[4]);
//                    UARTSend((uint8_t *)"yellow", 6);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
                case 0x06:
//                    UARTCharPutNonBlocking(UART0_BASE, color_number[5]);
//                    UARTSend((uint8_t *)"pink", 4);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[0]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[1]);
                    UARTCharPutNonBlocking(UART0_BASE, readdata[2]);
//                    UARTCharPutNonBlocking(UART0_BASE, color_min_distance);
//                    Delay_ms(1000);
//                    distance_show();
                    Delay_ms(10000);
                    break;
            }
//            UARTCharPutNonBlocking(UART0_BASE, blue_distance);
//            UARTCharPutNonBlocking(UART0_BASE, red_distance);
//            UARTCharPutNonBlocking(UART0_BASE, green_distance);
//            UARTCharPutNonBlocking(UART0_BASE, purple_distance);
//            UARTCharPutNonBlocking(UART0_BASE, yellow_distance);
//            UARTCharPutNonBlocking(UART0_BASE, pink_distance);

        }

//        UARTCharPutNonBlocking(UART0_BASE, readdata1[1]);
//        UARTCharPutNonBlocking(UART0_BASE, readdata2[1]);
//        UARTCharPutNonBlocking(UART0_BASE, readdata3[1]);
//        Delay_ms(1000);
//        distance_show();
//        Delay_ms(10000);

    }

}

